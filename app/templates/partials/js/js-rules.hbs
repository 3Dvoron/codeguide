# Синтаксис и лексика
## Отступы, пробелы и переносы
Для правильного форматирования используйте файл .editorconfig в вашем редакторе.

'indent': ['error', 2, {
    SwitchCase: 1,
    // continuation indent
    VariableDeclarator: 2,
    MemberExpression: 2,
    FunctionDeclaration: {parameters: 2},
    FunctionExpression: {parameters: 2},
    CallExpression: {arguments: 2}
}],
- Для отступов используются два пробела. Знак табуляции не используется. При переносах в продолжении строки используется четыре пробела.

'no-irregular-whitespace': 'error', // eslint:recommended
- Запрещено одновременное использование табов и пробелов для отступов.

'no-unexpected-multiline': 'error', // eslint:recommended
- Выражения должны заканчиваться точками с запятой.

'no-multi-spaces': 'error',
- Внутри строки не используется более одного пробела.

'brace-style': 'error',
- Открывающие скобки блоков кода находятся на одной строке с оператором, которых их использует
```javascript
// Плохо:
if (condition)
{
  // code
}

// Хорошо
if (condition) {
  // code
}
```

'block-spacing': ['error', 'always'],
- В однострочных блоках кода, код отделен от открывающей и закрывающей скобки пробелом

'array-bracket-spacing': ['error', 'never'],
- В однострочных массивах скобки не отделяются пробелами, первое значение идет непосредственно после закрывающей скобки, а закрывающая скобка идет непосредственно после последнего значения массива

'comma-spacing': 'error',
- После запятой всегда должен ставиться пробел, если запятая не в конце строки

'comma-style': 'error',
- Запрещено переносить запятую на новую строку при создании множественных переменных через один var, при объявлении массивов и объектов. Запрещено использовать запятую в конце списков, объектов или наоборов параметров функции.

'eol-last': 'error',
- Файл должен заканчиваться пустой строкой

'no-trailing-spaces': 'error',
- Строка не должна заканчиваться пробелами

'object-curly-spacing': 'error',
- В однострочных объектах и при деструктуризации фигурные скобки отбиваются пробелами с двух сторон

'no-mixed-spaces-and-tabs': 'error', // eslint:recommended
- В коде не используются совместно табы и пробелы

'no-multiple-empty-lines': ['error', {max: 2}],
- Блоки кода отделяются друг от друга не более чем двумя пустыми строками

'linebreak-style': 'off', // check this in git
- В качестве символа строки используется стандартный символ, который используется в системе

'computed-property-spacing': 'error',
- При объявлении вычисляемых ключей в объектах с помощью синтаксиса ES2016 в квадратных скобках не используются пробелы

'func-call-spacing': 'error',
- Оператор вызова функции () не отделяется круглыми скобками от названия функции

'key-spacing': 'error',
- В объектах после объявления ключа не ставится пробел. После двоеточия, которое отделяет в объектах ключ от значения может стоять только один пробел, выравнивать несколько значений при объявлении многострочного объекта запрещено

'keyword-spacing': 'error',
- Ключевые слова отделяются пробелами. Правило касается всех блоков, которые не оговорены отдельно в других правилах. В частности ключевые слова должны отделяться пробелами для условных операторов, циклов, операторов множественного выбора, блоков try..catch, объявлений классов и т. д.

'padded-blocks': ['off', 'never'],
- В блоках кода первая и последняя строка не должны быть пустыми (код не отбивается от начала блока кода)

'semi-spacing': 'error',
- После двоеточий и точек с запятым ставятся пробелы. Перед ними — не ставятся.

'space-before-blocks': 'error',
- Перед скобками начинающими новый блок кода должен ставиться пробел.

'space-before-function-paren': ['error', {named: 'never', anonymous: 'always'}],
- при объявлении анонимных функций, скобки с параметрами ставятся непосредственно после ключевого слова function. Если функция именована, перед названием ставится пробел, после — нет.

'spaced-comment': ['error', 'always'],
- В комментариях текст отбивается пробелом от начала комментария.

'generator-star-spacing': ['error', 'after'],
- При создании генераторов, звездочка идет сразу после ключевого слова function без пробелов

'rest-spread-spacing': 'error',
- В spread-операторе точки не отделяются от названия коллекции

'yield-star-spacing': ['error', 'after']
- Звездочка после ключевого слова yield не отбивается пробелом. После звездочки проблел ставится всегда.

## Строки
'no-multi-str': 'error', // запрет на использование переносов в ES5-строках
'no-octal-escape': 'error',
'quote-props': ['error', 'consistent'],
'quotes': ['error', 'single', {allowTemplateLiterals: true}],

## Числа
'no-floating-decimal': 'error', // запрет на опускание нуля
'no-octal': 'error', //default

## Литералы
'no-array-constructor': 'error',
'no-new-object': 'error',

### Объекты
'no-dupe-keys': 'error',
'no-dupe-args': 'error',
'no-duplicate-case': 'error',

### Массивы

## Операторы
'space-infix-ops': 'error',
'space-unary-ops': ['error', {words: true, nonwords: false}],

# Именование
'no-label-var': 'error',
'camelcase': 'error',
'no-shadow': 'error',
'no-shadow-restricted-names': 'error',
'no-undef': 'error', //default // нельзя использовать необъявленные переменные
'no-undef-init': 'error', // нельзя создавать переменные без значения
'no-undefined': 'error', // нельзя использовать значение undefined
'new-cap': 'error',

# Предотвращение ошибок
'semi': 'error',
'unicode-bom': 'warn',
'curly': ['error', "all"],
'no-empty': 'error',
'strict': ['error', 'global'],

## Условные операторы
'yoda': ['error', "never"],
'eqeqeq': 'error', // использование строгого сравнения
'no-cond-assign': 'error', // eslint:recommended // запрет на присвоение в блоке условия
'no-unsafe-negation': 'error', // небезопасное отрицание (использование ! в in или instanceof без скобок)
'use-isnan': 'error',
'no-fallthrough': 'error', // запрет на проваливание в switch
'no-nested-ternary': 'error',

## Функции
'consistent-return': 'error', // функция не возвращает undefined, особенно если есть другой return
'no-return-assign': 'error',
'arrow-parens': ['error', 'always'],

## Классы
'no-this-before-super': 'error',  // eslint:recommended
'constructor-super': 'error', // eslint:recommended


## Объявление переменных и функций
'no-var': 'error',
'no-redeclare': 'error', //default
'one-var': ['error', {
    var: 'never',
    let: 'never',
    const: 'never'
}],

### Объявление функций
'no-func-assign': 'error',
'no-inner-declarations': ["error", "functions"], // запрет на объявление значений внутри блоков
'no-new-func': 'error', // запрет на создание функций через конструктор Function
'prefer-rest-params': 'error',
'prefer-spread': 'error',

### Создание значений
'no-obj-calls': 'error', // запрет на создание значений с помощью конструкторов без new (Math(), JSON(), Reflect()).
'no-sparse-arrays': 'error', // запрет на массивы с пропусками
'comma-dangle': ['error', 'only-multiline'],
'no-new-wrappers': 'error', // запрет на вызов конструкторов для примитивов
'new-parens': 'error',
'no-new-symbol': 'error', // eslint:recommended

## Хорошие практики
'no-with': 'error',
'no-alert': 'error',
'no-eval': 'error',
'no-implied-eval': 'error', // запрет на код в строчках (например timeout)
'no-script-url': 'error', // запрет на использование протокола javascript:
'no-new': 'error', // запрет на использование конструкторов для сайдэффектов

### Манкипатчинг
'no-extend-native': 'error', // запрет на манкипатчинг
'no-global-assign': 'error',

### Контекст
'no-extra-bind': 'error', // запрет на использование bind там где не нужно (например IIFE)
'no-invalid-this': 'error', // запрет на использование this вне объектов и классов

### Переменные
'no-delete-var': 'error', //eslint:recommended

## Приведение типов
'no-extra-boolean-cast': 'error',
'valid-typeof': 'error', // проверка на правильный тип в typeof
'radix': 'error',

### Зафиксированный if (if..true)
'no-constant-condition': 'error',

# Модульность и области видимости
## Глобальная область видимости
## Системы сборки

# Чистый код
## Лишние символы (пробелы, точки с запятой и прочее)
'no-extra-semi': 'error',

## Отладчик и консоль
'no-console': 'error',
'no-debugger': 'error',

## Неиспользуемый код
'no-unreachable': 'error',
'no-unused-vars': ['error', {args: 'none'}], // eslint:recommended
'no-unused-expressions': 'error',

## Обработка ошибок и исключения
'no-throw-literal': 'error', // eslint:recommended // запрет на выброс исключениями не объектов Error а литералов

### try..catch с пустым try
'no-ex-assign': 'error'

# Документирование
'valid-jsdoc': ['error', {
    requireParamDescription: false,
    requireReturnDescription: false,
    requireReturn: false,
    prefer: {returns: 'return'}
}],

# Прочее
'guard-for-in': 'error', // Итерирование по объектам через hasOwnProp
'no-caller': 'error', // запрет на использование caller/callee в функциях
'no-iterator': 'error', // запрет на использование __iterator__
'no-proto': 'error', // запрет на использование __proto__
'no-labels': 'error',
'no-lone-blocks': 'error',
'no-sequences': 'error',

## Регулярные выражения
'no-control-regex': 'error',
'no-empty-character-class': 'error',
'no-invalid-regexp': 'error', // нельзя создавать объект RegExp из неправильной строки
'no-regex-spaces': 'error', // запрет на использование нескольких пробелов в регулярках. Вместо этого предлагается использовать {3}

# node.js
'no-process-exit': 'error',
